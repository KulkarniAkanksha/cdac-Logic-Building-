CDAC MUMBAI
Concepts of Operating System
Assignment 2

Part A

What will the following commands do?

1.echo "Hello, World!" ->To Display text Hello,world!

2.name="Productive" -> name is variable which is initialize with word "Productive"

3.touch file.txt  ->used to create a new empty file 

4.ls -a  -> to list the directory content

5.rm file.txt -> to remove file.txt

6.cp file1.txt file2.txt -> copy file1.txt to file2.txt

7.mv file.txt /path/to/directory/ -> move file.txt to the given directory

8.chmod 755 script.sh -> to change the mode bit of all the files within that directory.we remit everyone to execute and read the file.

9.grep "pattern" file.txt -> a command used to print the matching text patterns in files contained in regular expression

10.kill PID -> kill send signal to process and PID means process ID of the process we want to terminate

11.mkdir mydir && cd mydir && touch file.txxt && echo "Hello, World!" > file.txt && cat file.txt  -> it make directory name mydir it that creates text file and print hello,world! in that text file and then display the text file

12.ls -l | grep ".txt" ->list directory content with author of ech file and print all mathches pattern which extention is .txt

13.cat file1.txt file2.txt | sort | uniq -> This command is used to combine two text files ,sort is used to sorting that files,uniq is used to uniq lines between them

14.ls -l | grep "^d" ->list directory content with author of ech file and print all mathches pattern similar in "--"

15.grep -r "pattern" /path/to/directory/ ->print the lines that mates pattern whixh provides in following directory path

16.cat file1.txt file2.txt | sort | uniq â€“d ->  concat file1.txt to file2.txt or sort lines of that text file or report all repeated lines and print all duplicates lines

17.chmod 644 file.txt ->change the mode bit of file2.txt into r,w to owner and only read to groups and other users

18.cp -r source_directory destination_directory -> copy the source directory into destination directory.

19.find /path/to/search -name "*.txt" -> find the file name which extention .txt

20.chmod u+x file.txt -> this command is used to add permission to owner for execute file.txt

21.echo $PATH ->TO find whixh directories your shell is set to check for executable files.



Part B
Identify True or False: 

1. ls is used to list files and directories in a directory. = True

2. mv is used to move files and directories.=True 

3. cd is used to copy files and directories. =False

4. pwd stands for "print working directory" and displays the current directory. = True

5. grep is used to search for patterns in files. = True

6. chmod 755 file.txt gives read, write, and execute permissions to the owner, and read and execute 
permissions to group and others.=True

7. mkdir -p directory1/directory2 creates nested directories, creating directory2 inside directory1 
if directory1 does not exist.=True

8. rm -rf file.txt deletes a file forcefully without confirmation. = false 


Identify the Incorrect Commands: 

1. chmodx is used to change file permissions.
   ->chmod+x is used to change file permissions.

2. cpy is used to copy files and directories. 
   ->cp is used to copy files and directories

3. mkfile is used to create a new file. 
   ->mkdir is used to create a new file.

4. catx is used to concatenate files. 
   ->cat is used to concaenate files.

5. rn is used to rename files.
   ->mv is used to rename files. 

Part C

Question 1: Write a shell script that prints "Hello, World!" to the terminal. 
->echo "Hello,World!

Question 2: Declare a variable named "name" and assign the value "CDAC Mumbai" to it. Print the 
value of the variable. 
->#!/bin/bash
  name="Cdac Mumbai"
  echo $name

Question 3: Write a shell script that takes a number as input from the user and prints it. 
->#!/bin/bash
  echo "Enter numbers"
  read a
  echo $a
  read b
  echo $b
  read c
  echo $c

Question 4: Write a shell script that performs addition of two numbers (e.g., 5 and 3) and prints the 
result. 
->#!/bin/bash
  echo "Enter two numbers:"
  read num1
  read num2
  sum=$(($num1+$num2))
  echo "Addition:"$sum

Question 5: Write a shell script that takes a number as input and prints "Even" if it is even, otherwise 
prints "Odd". 
->#!/bin/bash
  echo "enter the number:"
  read num1
  echo $num1
  if(($num1%2==0))
  then 
     echo "number is even"
  else
     echo "number is odd"
  fi

Question 6: Write a shell script that uses a for loop to print numbers from 1 to 5. 
->#!/bin/bash
read i
for((i=1;i<=5;i++))
do
        echo $i;
done

Question 7: Write a shell script that uses a while loop to print numbers from 1 to 5. 
->#!/bin/bash
i=1
while [ $i -le 5 ];
do 
    echo $i
    let i+=1
done


Question 8: Write a shell script that checks if a file named "file.txt" exists in the current directory. If it 
does, print "File exists", otherwise, print "File does not exist". 
->#!/bin/bash
if [ -e "file11.txt" ];
then
        echo "file is exist"
else
        echo "file is not exist"
fi


Question 9: Write a shell script that uses the if statement to check if a number is greater than 10 and 
prints a message accordingly. 
->#!/bin/bash
echo -n "enter number:"
read num
echo number is $num
if [ $num -gt 10 ]
then
        echo "$num is greater than 10"
fi



Question 10: Write a shell script that uses nested for loops to print a multiplication table for numbers 
from 1 to 5. The output should be formatted nicely, with each row representing a number and each 
column representing the multiplication result for that number. 
->
#!/bin/bash
echo "Multiplication table "
for (( i=1; i<=5; i++ ));do
        for (( j=1; j<=5; j++ ));do
                result=$((i * j))
                printf "%-4d" $result
        done
        echo
done


Question 11: Write a shell script that uses a while loop to read numbers from the user until the user enters 
a negative number. For each positive number entered, print its square. Use the break statement to exit the 
loop when a negative number is entered. 
->#!/bin/bash
echo "Enter the number"
while true;
do
        read num
        if [ $num -lt 0 ];
        then
                echo "Exiting loop"
                break
        fi
        if [ $num -gt 0 ];
        then
                sqa=$(( num * num ))
                echo "Square of the  $num is : $sqa"
        fi
done

Part E

1. Consider the following processes with arrival times and burst times: 
 | Process | Arrival Time | Burst Time | CT  | TAT | WT | RT |
 |---------|--------------|------------|-----|-----|----|----|
 | P1      | 0            | 5          | 5   |  5  |  0 |  0 |
 | P2      | 1            | 3          | 8   |  7  |  4 |  5 |
 | P3      | 2            | 6          | 14  |  12 |  6 |  8 |

 Calculate the average waiting time using First-Come, First-Served (FCFS) scheduling.  

  Avg WT= 6+4+0 =10/3=3.33


2. Consider the following processes with arrival times and burst times: 
 | P | AT | BT |CT |TAT | WT | RT  |
 |---------------------------------|
 | P1 |0  | 3 |  9 |  9 | 6  | 0   |
 | P2 | 1 | 5 |  13| 12 | 7  | 9   |
 | P3 | 2 | 1 |  3 |  1 | 0  | 2   |
 | P4 | 3 | 4 |  7 |  4 | 0  | 3   |
 Calculate the average turnaround time using Shortest Job First (SJF) scheduling.

  Avg WT=13/4=3.1

3. Consider the following processes with arrival times, burst times, and priorities (lower number 
indicates higher priority): 
 | Pr |AT  |BT | P|CT  |TAT |WT  |RT |
 |-----------------------------------| 
 | P1 | 0  |6 | 3 | 12 | 12 | 6  | 0 |
 | P2 | 1  |4 | 1 | 5  | 4  | 0  | 1 |
 | P3 | 2  |7 | 4 | 16 | 14 | 10 | 12|
 | P4 | 3  |2 | 2 | 7  | 4  | 2  | 5 |
 Calculate the average waiting time using Priority Scheduling. 
   
  Avg WT=6+10+2=18/4=4.5


4. Consider the following processes with arrival times and burst times, and the time quantum for 
 | P  |AT | BT| CT | TAT| WT| RT |
 |-------------------------------| 
 | P1 | 0 | 4 | 6  | 6  | 2 | 0  |
 | P2 | 1 | 5 | 13 | 12 | 7 | 2  |
 | P3 | 2 | 2 | 10 | 8  | 6 | 8  |
 | P4 | 3 | 3 | 14 | 11 | 8 | 10 |
 Calculate the average turnaround time using Round Robin scheduling. 

  AVG TAT=6+12+8+11=37/4=9.25

5.Consider a program that uses the fork() system call to create a child process. Initially, the parent 
process has a variable x with a value of 5. After forking, both the parent and child processes 
increment the value of x by 1. 
 What will be the final values of x in the parent and child processes after the fork() call?
 fork()=2^n=2^5=64
 x=64